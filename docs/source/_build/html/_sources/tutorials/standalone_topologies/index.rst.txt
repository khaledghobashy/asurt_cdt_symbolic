
.. |br| raw:: html

    <br>

Standalone Topologies
=====================

Project Structure
^^^^^^^^^^^^^^^^^
An important step to do before the actual modeling step, is how can we 
structure and store our files and scripts to keep things organized some how. 
This is not a mandatory step but is highly recommended to keep things neat.

A recommended project structure for standalone projects is as follows:

.. code::

  standalone_project/
  ├── numenv
  ├── simenv
  │   ├── configs
  │   ├── python
  │   │   └── simulation.py
  │   └── results
  └── symenv
      ├── data
      └── sym_model.py


On the root level, we have three main directories:

1. **numenv** Short for "**numerical environments**". |br|
   A directory to store the numerical code files of the model that are 
   generated by the uraeus code-generators. 
   |br| |br|

2. **simenv** Short for "**simulation environments**". |br|
   A directory to store the numerical simulation files, the numerical 
   configurations .json files and the results of the simulations. 
   The directory contains two main sub-directories, the results and the config 
   directories, where additional directories are added for the desired 
   simulation environments used. 
   |br| |br|

3. **symenv** Short for "**symbolic environment**". |br|
   A directory to store the symbolic model files. This directory has the 
   sym_model.py script that contains the model script, and a data directory 
   that is used to store the output files from the "Symbolic Model Creation" 
   activity. 
   |br| |br|


.. note::
  It should be noted that this project structure may not be the optimal way to 
  structure your project, and you are encouraged to restructure this as you see
  fit.

-------------------------------------------------------------------------------

Examples
^^^^^^^^
Below is a list of examples of multi-body models created as standalone models 
and project.

.. toctree::
   :maxdepth: 1

   pendulum.rst

